//[Lightning] [System] CameraSort,9
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch opengl
#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_POSITION_CURRENT 1
#define USE_DEAD_LIST_COUNT 1
#define VFX_LOCAL_SPACE 1
#include "Packages/com.unity.render-pipelines.universal/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"



CBUFFER_START(parameters)
    float4x4 localToWorld;
CBUFFER_END


struct VFXAttributes
{
    float3 position;
};

struct VFXSourceAttributes
{
};



#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"



CBUFFER_START(params)
    uint nbMax;
    uint dispatchWidth;
CBUFFER_END

CBUFFER_START(cameraParams)
    float3 cameraPosition;
CBUFFER_END

ByteAddressBuffer attributeBuffer;
StructuredBuffer<uint> inputBuffer;

#if USE_DEAD_LIST_COUNT
ByteAddressBuffer deadListCount;
#endif

struct Kvp
{
	float sortKey;
	uint index;
};

RWStructuredBuffer<Kvp> outputBuffer;

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint threshold = nbMax;
#if USE_DEAD_LIST_COUNT
	threshold -= deadListCount.Load(0);
#endif
	uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP + groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
	if (id < threshold)
	{
		uint index = inputBuffer[id];
		
		VFXAttributes attributes = (VFXAttributes)0;
		attributes.position = float3(0, 0, 0);
		

		
#if VFX_LOCAL_SPACE
		float3 wPos = mul(localToWorld,float4(attributes.position,1.0f)).xyz;
#else
		float3 wPos = attributes.position;
#endif
		float3 camToPos = wPos - cameraPosition;
		
		Kvp kvp;
		kvp.sortKey = dot(camToPos,camToPos); // sqr distance to the camera
		kvp.index = index;

		outputBuffer[id] = kvp;
	}
}
